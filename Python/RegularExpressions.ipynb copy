{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Regular Expressions\n",
    "## Trevor, Kate, Abe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import pandas as pd\n",
    "from collections import Counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(r'web_log_file.txt', 'r') as file:\n",
    "    webLog =  file.read()\n",
    "    \n",
    "# It works but it's really long so don't try to print it out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n109.169.248.247 - - [12/Dec/2015:18:25:11 +0100] \"GET /administrator/ HTTP/1.1\" 200 4263 \"-\" \"Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0\" \"-\"\\n109.169.248.247 - - [12/Dec/2015:18:25:11 +0100] \"POST /administrator/index.php HTTP/1.1\" 200 4494 \"http://almhuette-raith.at/administrator/\" \"Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0\" \"-\"\\n46.72.177.4 - - [12/Dec/2015:18:31:08 +0100] \"GET /administrator/ HTTP/1.1\" 200 4263 \"-\" \"Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0\" \"-\"\\n46.72.177.4 - - [12/Dec/2015:18:31:08 +0100] \"POST /administrator/index.php HTTP/1.1\" 200 4494 \"http://almhuette-raith.at/administrator/\" \"Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0\" \"-\"\\n83.167.113.100 - - [12/Dec/2015:18:31:25 +0100] \"GET /administrator/ HTTP/1.1\" 200 4263 \"-\" \"Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0\" \"-\"\\n83.167.113.100 - - [12/Dec/2015:18:31:25 +0100] \"POST /administrator/index.php HTTP/1.1\" 200 4494 \"http://almhuette-raith.at/administrator/\" \"Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0\" \"-\"\\n95.29.198.15 - - [12/Dec/2015:18:32:10 +0100] \"GET /administrator/ HTTP/1.1\" 200 4263 \"-\" \"Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0\" \"-\"\\n95.29.198.15 - - [12/Dec/2015:18:32:11 +0100] \"POST /administrator/index.php HTTP/1.1\" 200 4494 \"http://almhuette-raith.at/administrator/\" \"Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0\" \"-\"\\n109.184.11.34 - - [12/Dec/2015:18:32:56 +0100] \"GET /administrator/ HTTP/1.1\" 200 4263 \"-\" \"Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0\" \"-\"\\n109.184.11.34 - - [12/Dec/2015:18:32:56 +0100] \"POST /administrator/index.php HTTP/1.1\" 200 4494 \"http://almhuette-raith.at/administrator/\" \"Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0\" \"-\"\\n91.227.29.79 - - [12/Dec/2015:18:33:51 +0100] \"GET /administrator/ HTTP/1.1\" 200 4263 \"-\" \"Mozilla/5.0 (Windows NT 6.0; rv:3'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "webLog[0:2000]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Splitting each line by IP address to better look at each entry, then printing the total number of entries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "splitLog = webLog.split('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "109.169.248.247 - - [12/Dec/2015:18:25:11 +0100] \"GET /administrator/ HTTP/1.1\" 200 4263 \"-\" \"Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0\" \"-\" \n",
      "\n",
      "109.169.248.247 - - [12/Dec/2015:18:25:11 +0100] \"POST /administrator/index.php HTTP/1.1\" 200 4494 \"http://almhuette-raith.at/administrator/\" \"Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0\" \"-\" \n",
      "\n",
      "46.72.177.4 - - [12/Dec/2015:18:31:08 +0100] \"GET /administrator/ HTTP/1.1\" 200 4263 \"-\" \"Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0\" \"-\" \n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "22141"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(splitLog[1], '\\n')\n",
    "print(splitLog[2], '\\n')\n",
    "print(splitLog[3], '\\n')\n",
    "\n",
    "len(splitLog)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. What browsers are used to access this website? Are there some that are more common than others? (Best guesses on browsers is good enough here, some are difficult to identify)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From looking at the individual logs from above, we see that the browser is always listed at the end of the entry in between the characters \"-\" \"-\". Below I create a regular expression to take the values between those characters, create a dataframe with those strings, and see the individual value counts of each. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Browsers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0</th>\n",
       "      <td>2572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-</th>\n",
       "      <td>2088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Python-urllib/2.7</th>\n",
       "      <td>457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)</th>\n",
       "      <td>403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Python-urllib/1.17</th>\n",
       "      <td>368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (Windows NT 5.1; rv:29.0) Gecko/20100101 Firefox/29.0</th>\n",
       "      <td>354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/23.0.1271.17 Safari/537.11</th>\n",
       "      <td>256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)</th>\n",
       "      <td>218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)</th>\n",
       "      <td>216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</th>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    Browsers\n",
       "Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/201...      2572\n",
       "-                                                       2088\n",
       "Python-urllib/2.7                                        457\n",
       "Mozilla/5.0 (compatible; bingbot/2.0; +http://w...       403\n",
       "Python-urllib/1.17                                       368\n",
       "Mozilla/5.0 (Windows NT 5.1; rv:29.0) Gecko/201...       354\n",
       "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.1 ...       256\n",
       "Mozilla/5.0 (compatible; Googlebot/2.1; +http:/...       218\n",
       "Mozilla/5.0 (compatible; Baiduspider/2.0; +http...       216\n",
       "Mozilla/5.0 (compatible; YandexBot/3.0; +http:/...        85"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pattern_1 = '(?<=\"-\" \")(.*)(?=\" \"-\")'\n",
    "Browsers = re.findall(pattern_1, webLog)\n",
    "Browsers\n",
    "BROWSERS = pd.DataFrame(Browsers,columns=['Browsers'])\n",
    "BROWSERS[\"Browsers\"].value_counts()\n",
    "\n",
    "unique = pd.DataFrame(BROWSERS[\"Browsers\"].value_counts())\n",
    "\n",
    "unique.head(10)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After taking a look at some of the top values, I ran into some interesting things:\n",
    "\n",
    "\n",
    "1) the second most frequent value is just a hyphen - I looked further into this and found those entries looked something like this:  (208.43.103.162 - - [16/Dec/2015:17:01:31 +0100] \"GET / HTTP/1.1\" 200 10439 \"-\" \"-\" \"-\"), I don't necessarily know what that means, but it doesn't look like your average browser access.\n",
    "\n",
    "\n",
    "\n",
    "2) The second and third most used browsers were something called \"Python-urllib\" and \"bingbot.htm\" from Mozilla. Both are also not your average browsers (may be some indication of malicious entry attempts)\n",
    "\n",
    "\n",
    "\n",
    "3) The part that I really didn't understand was trying to distinguish between google chrome and safari - it seems that every entry mentioning google chrome also mentioned safari - because of this I queried all of the times Chrome was mentioned, and subtracted that from the total mentions of safari in order to get some more accurate numbers. (I also referenced this website to get a better understanding of the connection labels : https://www.whatismybrowser.com/guides/the-latest-user-agent/chrome)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Browsers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/20100101 Firefox/34.0</th>\n",
       "      <td>2572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-</th>\n",
       "      <td>2088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Python-urllib/2.7</th>\n",
       "      <td>457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)</th>\n",
       "      <td>403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Python-urllib/1.17</th>\n",
       "      <td>368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (Windows NT 5.1; rv:29.0) Gecko/20100101 Firefox/29.0</th>\n",
       "      <td>354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/23.0.1271.17 Safari/537.11</th>\n",
       "      <td>256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)</th>\n",
       "      <td>218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)</th>\n",
       "      <td>216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</th>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    Browsers\n",
       "Mozilla/5.0 (Windows NT 6.0; rv:34.0) Gecko/201...      2572\n",
       "-                                                       2088\n",
       "Python-urllib/2.7                                        457\n",
       "Mozilla/5.0 (compatible; bingbot/2.0; +http://w...       403\n",
       "Python-urllib/1.17                                       368\n",
       "Mozilla/5.0 (Windows NT 5.1; rv:29.0) Gecko/201...       354\n",
       "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.1 ...       256\n",
       "Mozilla/5.0 (compatible; Googlebot/2.1; +http:/...       218\n",
       "Mozilla/5.0 (compatible; Baiduspider/2.0; +http...       216\n",
       "Mozilla/5.0 (compatible; YandexBot/3.0; +http:/...        85"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#printing out the value counts for all browser labels\n",
    "unique.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After debating what to put for the final answer, I chose to stick with the main browsers that I could easily identify: Chrome, Safari and Firefox. The sell above can be easily modified to remove the head function so one could easily go identify other browsers used, (but I believe these 3 to be the most frequently used). One last thing to mention, there also appear to be alot of connection attempts with different \"bots\" - whether this is malicious or not will need further attention, but I felt it important to note. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4553"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pattern_1 = 'Chrome'\n",
    "len(re.findall(pattern_1, webLog))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7272"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pattern_2 = 'Safari'\n",
    "len(re.findall(pattern_2, webLog))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7715"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pattern_3 = 'Firefox'\n",
    "len(re.findall(pattern_3, webLog))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above code, we can see that Chrome was used to access 4553 times, Safari was used 7272 - 5443 = 1829 times, and Firefox was used 7715 times. Combining this with the over 2000 entries labled \"-\" and nearly 1000 more from the python package, we can account for a large ammount of the 22,000 total entries. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Of the most common consumer used browsers, Firefox was used most often, followed by Chrome and then Safari."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. What websites/IP addresses bring this website the most traffic?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again from looking at the individual entries, we can see that IP addresses are the first thing listed per connection. Below is a regular expression to grab the values between the new line (indicating a new entry) and \"- -\" (what looks like the indication that the IP address stops. I then print out all of the IP addresses queried. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>109.169.248.247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>109.169.248.247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>46.72.177.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>46.72.177.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>83.167.113.100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                IP\n",
       "0  109.169.248.247\n",
       "1  109.169.248.247\n",
       "2      46.72.177.4\n",
       "3      46.72.177.4\n",
       "4   83.167.113.100"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pattern_1 = '(?<=\\n)(.*)(?= - -)'\n",
    "IP_Adresses = re.findall(pattern_1, webLog)\n",
    "IP = pd.DataFrame(IP_Adresses,columns=['IP'])\n",
    "IP.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I then put these values into a dataframe, and take the 5 most commonly occuring IP addresses to see which brought the most traffic to the website. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "148.251.50.49     1929\n",
       "52.22.118.215      734\n",
       "213.150.254.81     434\n",
       "37.1.206.196       433\n",
       "84.112.161.41      376\n",
       "Name: IP, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IP = pd.DataFrame(IP_Adresses,columns=['IP'])\n",
    "IP[\"IP\"].value_counts().head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On top of the IP addresses listed above, we can look back to the code from the browser searches and see the following websites create significant traffic (or are atleast mentioned in the connection):\n",
    "\n",
    "http://www.bing.com/bingbot.htm\n",
    "\n",
    "http://www.google.com/bot.html\n",
    "\n",
    "http://www.baidu.com/search/spider.html\n",
    "\n",
    "http://yandex.com/bots\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Are there specific times of the year that the website recieves more traffic than other times?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting all dates from the log\n",
    "pattern = '\\d+/\\w+/\\d+'\n",
    "dates = list()\n",
    "for line in splitLog:\n",
    "    dates.append(re.findall(pattern, line))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Day of the Week</th>\n",
       "      <th>Month</th>\n",
       "      <th>Week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-12-12</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-12-12</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-12-12</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-12-12</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2015-12-12</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22136</th>\n",
       "      <td>2016-01-16</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22137</th>\n",
       "      <td>2016-01-16</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22138</th>\n",
       "      <td>2016-01-16</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22139</th>\n",
       "      <td>2016-01-16</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22140</th>\n",
       "      <td>2016-01-16</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>22140 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date  Day of the Week  Month  Week\n",
       "1     2015-12-12                5     12    50\n",
       "2     2015-12-12                5     12    50\n",
       "3     2015-12-12                5     12    50\n",
       "4     2015-12-12                5     12    50\n",
       "5     2015-12-12                5     12    50\n",
       "...          ...              ...    ...   ...\n",
       "22136 2016-01-16                5      1     2\n",
       "22137 2016-01-16                5      1     2\n",
       "22138 2016-01-16                5      1     2\n",
       "22139 2016-01-16                5      1     2\n",
       "22140 2016-01-16                5      1     2\n",
       "\n",
       "[22140 rows x 4 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "OurDates = pd.DataFrame(dates, columns = [\"Date\"])\n",
    "OurDates = OurDates[1:]\n",
    "OurDates['Date'] = OurDates['Date'].apply(lambda x: datetime.strptime(x, '%d/%b/%Y'))\n",
    "OurDates['Day of the Week'] = OurDates['Date'].apply(lambda x: x.weekday())\n",
    "OurDates['Month'] = OurDates['Date'].apply(lambda x: x.month) \n",
    "OurDates['Week'] = OurDates['Date'].apply(lambda x: x.isocalendar()[1])\n",
    "OurDates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5    3943\n",
      "0    3417\n",
      "6    3332\n",
      "2    3137\n",
      "3    3108\n",
      "4    2758\n",
      "1    2445\n",
      "Name: Day of the Week, dtype: int64\n",
      "51    7904\n",
      "2     3873\n",
      "53    3202\n",
      "1     2947\n",
      "52    2495\n",
      "50    1719\n",
      "Name: Week, dtype: int64\n",
      "12    14148\n",
      "1      7992\n",
      "Name: Month, dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Day of the Week</th>\n",
       "      <th>Month</th>\n",
       "      <th>Week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12119</th>\n",
       "      <td>2015-12-28</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12120</th>\n",
       "      <td>2015-12-28</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12121</th>\n",
       "      <td>2015-12-28</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12122</th>\n",
       "      <td>2015-12-28</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12123</th>\n",
       "      <td>2015-12-28</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15316</th>\n",
       "      <td>2016-01-03</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15317</th>\n",
       "      <td>2016-01-03</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15318</th>\n",
       "      <td>2016-01-03</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15319</th>\n",
       "      <td>2016-01-03</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15320</th>\n",
       "      <td>2016-01-03</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3202 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date  Day of the Week  Month  Week\n",
       "12119 2015-12-28                0     12    53\n",
       "12120 2015-12-28                0     12    53\n",
       "12121 2015-12-28                0     12    53\n",
       "12122 2015-12-28                0     12    53\n",
       "12123 2015-12-28                0     12    53\n",
       "...          ...              ...    ...   ...\n",
       "15316 2016-01-03                6      1    53\n",
       "15317 2016-01-03                6      1    53\n",
       "15318 2016-01-03                6      1    53\n",
       "15319 2016-01-03                6      1    53\n",
       "15320 2016-01-03                6      1    53\n",
       "\n",
       "[3202 rows x 4 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print(OurDates.value_counts().head(10))\n",
    "\n",
    "print(OurDates[\"Day of the Week\"].value_counts().head(10))\n",
    "print(OurDates[\"Week\"].value_counts().head(10))\n",
    "print(OurDates[\"Month\"].value_counts().head(10))\n",
    "\n",
    "OurDates[OurDates['Week'] == 53]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the dates from the log, it appears that we only have dates from December 2015 through January 2016. However, from these two months we can see that some days had more traffic than others. The top dates for traffic were December 19th, 13th, and 18th in 2015."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we look at each day of the week specifically, it appears that Saturdays had the most traffic and Tuesdays had the least."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While the logs don't include the full months of December and January, we can see that from what we do have that December had about twice the traffic of January."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As far as which week was the busiest of the logs that we have, we can see that the 51st week of the year was very busy which was 12-14-2015 through 12-20-2015. It had over twice as much traffic as the other weeks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4.  This log file is supposedly contains some malicious attempts to alter the site. Do you see any evidence of this? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#log file for reference and a starting glance\n",
    "#for line in splitLog:\n",
    "    #print(line)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One place there might be some malicious attempts to the website are where there are many requests from the same IP or lots of failed logins. Additionaly if there is a new spike that could be a signal. I looked up and saw that there were lots of entires that look similar to\n",
    "\n",
    "52.22.118.215 - - [11/Jan/2016:11:43:25 +0100] \"GET /apache-log/access_150111.log HTTP/1.0\" 404 222 \"-\" \"Python-urllib/1.17\" \"-\"\n",
    "\n",
    "From what I understand It looks like someone is trying to get access to the log but with the 404 it does not look like they are sucessful. So I'm going to explore this a little more. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is just setting a pattern to look for all of the the apache-log/access attempts. It seemed best to just search by this becuase it would get the most hits in the easiet way. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pattern = '(apache-log\\/access_)'\n",
    "loc = re.search(pattern, webLog)\n",
    "print(loc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(webLog[int(loc.start()):int(loc.end())])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Function to look through the entire log file line by line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def match_reg(pattern, string):\n",
    "    return(re.match(pattern, string))\n",
    "  \n",
    "pattern = r'(.*:).*(apache-log\\/access_)'\n",
    "\n",
    "matches = list()\n",
    "for line in splitLog:\n",
    "    \n",
    "    m = match_reg(pattern, line)\n",
    "    \n",
    "    if m != None:\n",
    "        matches.append((m.group(1).replace(':', ''), m.group(2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Counting all the instances where there is the pattern of apache-log/acess_ ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "apache_log = [x[0] for x in matches]\n",
    "\n",
    "count_title_mentions = Counter(apache_log)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(count_title_mentions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I don't think it's helpful to put this on a bar chart becuase clearly this IP 52.22.118.215 has 100's of attempts within seconds to get the log that they are being lumped together. In total 52.22.118.215 has 732 (255+208+158+111) on January 11th for the same thing. \n",
    "\n",
    "Adidtionally the IP 76.168.128.240 has a total of 87 (46+32+9) attemps on the same day. I would say this looks pretty suspicious  as there are no other similar atempts and so many on the same day."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I am going to do the same process again but this time with looking for sql."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pattern = '(sql)'\n",
    "loc = re.search(pattern, webLog)\n",
    "print(loc)\n",
    "\n",
    "print(webLog[int(loc.start()):int(loc.end())])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def match_reg(pattern, string):\n",
    "    return(re.match(pattern, string))\n",
    "  \n",
    "pattern = r'(.*:).*(sql)'\n",
    "\n",
    "matches = list()\n",
    "for line in splitLog:\n",
    "    \n",
    "    m = match_reg(pattern, line)\n",
    "    \n",
    "    if m != None:\n",
    "        matches.append((m.group(1).replace(':', ''), m.group(2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sql_log = [x[0] for x in matches]\n",
    "\n",
    "count_sql_mentions = Counter(sql_log)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Honestly, I don't really konw what this means or if there is valuable information so I won't try to break it down too much but from intuition it looks like there might be some sql attemps to break in becuase I read that sometimes people use things that look like a sql attempt to get in. It looks like that could be the case here but I don't know enought about log files to see if it's useful. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(count_sql_mentions)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
